zstyle ':completion::complete:*' use-cache 1

# Path to your oh-my-zsh configuration.
ZSH=$HOME/dotfiles/oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
#ZSH_THEME="robbyrussell"
if [[ a$ZSH_THEME == a ]]; then
	#ZSH_THEME="flazz"
	ZSH_THEME="pierre"
fi

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Example format: plugins=(rails git textmate ruby lighthouse)
#plugins=(git zsh-syntax-highlighting history-substring-search)
plugins=(git zsh-syntax-highlighting)
#plugins=(git vi-mode)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
#autoload -U compinit promptinit
#compinit
#promptinit; prompt gentoo

export LESS=-ir
export EDITOR=vim

bindkey "^U" backward-kill-line

bindkey "\e[3~" delete-char
bindkey "\e[A" up-line-or-history
bindkey "\e[B" down-line-or-history

bindkey "\e[1~" beginning-of-line
bindkey "\e[4~" end-of-line
bindkey "\eOH" beginning-of-line
bindkey "\eOF" end-of-line
bindkey "\e[H" beginning-of-line
bindkey "\e[F" end-of-line

bindkey "\e[1;5C" forward-word
bindkey "\e[1;5D" backward-word
bindkey "\eO5D" backward-word
bindkey "\eO5C" forward-word
bindkey "\e[5D" backward-word
bindkey "\e[5C" forward-word

bindkey "\e[1;3C" forward-word
bindkey "\e[1;3D" backward-word
bindkey "\eO3D" backward-word
bindkey "\eO3C" forward-word
bindkey "\e[3D" backward-word
bindkey "\e[3C" forward-word

bindkey "\eOD" backward-word
bindkey "\eOC" forward-word
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word

bindkey "\e" backward-delete-word

if true; then
bindkey "\ep" history-search-backward
bindkey "\en" history-search-forward

bindkey "\eO5A" history-search-backward
bindkey "\eO5B" history-search-forward
bindkey "\e[1;5A" history-search-backward
bindkey "\e[1;5B" history-search-forward

bindkey "^R" history-incremental-search-backward
fi


bindkey -M isearch "\e[A" history-beginning-search-backward
bindkey -M isearch "\e[B" history-beginning-search-forward
bindkey '\ee' edit-command-line

bindkey "\ep" history-beginning-search-backward
bindkey "\en" history-beginning-search-forward

#bindkey "\e" self-insert
#bindkey "^[" self-insert

bindkey "^P" run-pwd
zle -N run-pwd
function run-pwd {
	echo
	pwd
	zle redisplay
}

bindkey "^[l" run-ls-la
zle -N run-ls-la
function run-ls-la {
	echo
	ls -la
	zle redisplay
}

bindkey "\e[21~" run-mc
zle -N run-mc
function run-mc {
    source /usr/lib/mc/mc-wrapper.sh
	zle clear-screen
	zle redisplay
}

bindkey "\eO5A" cd-up
bindkey "\e[1;5A" cd-up
zle -N cd-up
function cd-up {
	cd ..
	zle -I
}


bindkey '\e[23~' tmux-mouse-off
zle -N tmux-mouse-off
function tmux-mouse-off {
     tmux setw -g mode-mouse off > /dev/null
}

bindkey '\e[24~' tmux-mouse-on
zle -N tmux-mouse-on
function tmux-mouse-on {
    tmux setw -g mode-mouse on > /dev/null
}

if [[ a$VENDOR == a"apple" ]]; then
	bindkey "^p" history-search-backward
	bindkey "^n" history-search-forward
fi

rerun-with-sudo () {
  LBUFFER="sudo !!"
  zle accept-line
}
zle -N rerun-with-sudo
bindkey '^Xx' rerun-with-sudo


function set_title { print -Pn "\e]0;$1\a" }
function get_title { print -Pn "\e[21t" }
function save_title { print -Pn '\e[22;0t' }
function restore_title { print -Pn '\e[23;0t' }

alias ls="LC_COLLATE=C ls --color=tty --group-directories-first"
alias l="ls -la"

export GREP_OPTIONS="$GREP_OPTIONS --exclude-dir=\.svn --exclude-dir=\.hg --exclude-dir=\.git"

unalias g
f() {
    find ${2-.} -type d -name .git -prune -o -type d -name .hg -prune -o -type d -name .svn -prune -o -iname "*$1*" -print | grep -i "$1"
}
g() {
    [ x$1 != x ] || return 1
    local dir=${2-.}
    [ -d $dir ] || return 1
    grep -i "$1" -R $dir
}

unsetopt correct_all

